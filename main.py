# ❗ ЗАДАЧА #1

# ЗМІННІ


# Створіть змінну name та привласніть їй ваше ім'я, наприклад 'Данило' Створіть змінну age і надайте їй значення свого віку


name = 'Данило'
age = 36
print("ЗАДАЧА #1 :", name, ",", age)



# ❗ ЗАДАЧА #2

# ОПЕРАТОРИ


# Створить програму на Python, яка розраховує вартість споживання електроенергії на основі заданого тарифу та показників лічильника.

# Задачі:

# У змінній rate зберігається вартість одного кіловата електроенергії. Встановіть для цієї змінної значення 1.68.
# У змінній value повинно бути значення показання лічильника електроенергії в кіловатах. Задайте для value розумне ціле число.
# Розрахуйте вартість споживання електроенергії, помноживши rate на value, та збережіть результат у змінній payment.


rate = 1.68
value = 1234
payment = rate * value
print("ЗАДАЧА #2 :", payment)



# ❗ ЗАДАЧА #3

# ПОРЯДОК ОПЕРАТОРІВ У ВИРАЗІ


# Створіть програму на Python, яка розраховує загальну вартість споживання електроенергії, враховуючи різні тарифи для денного та нічного часу.

# Задачі:

# В змінній rate зберігається вартість одного кіловата електроенергії за денним тарифом. Встановіть для цієї змінної значення 1.68.
# Визначте нічний тариф як половину денного тарифу.
# У змінній value_day зберігайте показання лічильника за день, а в value_night — за ніч. Задайте для них розумні цілі числа.
# Розрахуйте загальну вартість споживання електроенергії, використовуючи денні та нічні показання та тарифи, та збережіть результат у змінній payment.


rate = 1.68
value_day = 2345
value_night = 1234
payment = value_day * rate + value_night * rate / 2
print("ЗАДАЧА #3 :", payment)



# ❗ ЗАДАЧА #4

# ТИПИ ДАНИХ: РЯДКИ


# При покупці квитків нам завжди необхідно знати ім'я та прізвище покупця. Створіть дві рядкові змінні для зберігання імені та прізвища покупця квитків.

# Задачі:

# Оголосіть змінну first_name та привласніть їй ім'я.
# Оголосіть змінну last_name та привласніть їй прізвище.
# Очікуваний результат:
# Після виконання програми, ви повинні мати дві змінні: first_name та last_name, кожна з яких містить відповідну частину вашого імені.

# Підказки:

# Пам'ятайте, що рядкові значення в Python повинні бути вказані у лапках.
# Виберіть ім'я та прізвище, які ви б хотіли використовувати для цього завдання.


first_name = 'Andrii'
last_name = 'Barinov'
print("ЗАДАЧА #4 :", first_name, last_name)



# ❗ ЗАДАЧА #5

# РЯДКИ. КОНКАТЕНАЦІЯ РЯДКІВ


# Використовуючи раніше створені змінні first_name та last_name, здійсніть конкатенацію цих змінних для формування повного імені.

# Задачі:

# Використовуючи змінні first_name та last_name, створіть нову змінну full_name.
# Змінна full_name повинна бути результатом конкатенації (об'єднання) first_name, пробілу (" ") та last_name.
# Використовуйте оператор + для конкатенації рядків.

# Очікуваний результат:

# Програма повинна створити та вивести змінну full_name, яка містить повне ім'я, складене з імені та прізвища, розділених пробілом.

# Підказки:

# Переконайтеся, що між ім'ям та прізвищем є пробіл.
# Пам'ятайте, що для об'єднання рядків використовують оператор +.


first_name = 'Andrii'
last_name = 'Barinov'
full_name = first_name + " " + last_name
print("ЗАДАЧА #5 :", full_name)



# ❗ ЗАДАЧА #6

# ТИПИ ДАНИХ. ЧИСЛА


# Створіть програму на Python, яка розраховує площу кімнати за допомогою заданих довжини та ширини, та генерує інформативне повідомлення про результати розрахунку.

# Задачі:

# Використовуйте змінні length та width для зберігання довжини та ширини кімнати відповідно. Задайте їм значення 2.75 та 1.75.
# Розрахуйте площу кімнати area, перемноживши length та width.
# Створіть змінну show, яка міститиме рядок з інформацією про довжину, ширину та площу кімнати. Використовуйте функцію форматування рядків для вставки значень змінних # # length, width та area у вказаний шаблон.

# Шаблон: 'With width <значення ширини> and length <значення довжини> of the room, its area is equal to <значення площі>'

# Очікуваний результат:

# Програма повинна в змінній show зберігати рядок, що інформує про довжину та ширину кімнати та її загальну площу.

# Підказки:

# Використовуйте f-рядок для формування рядка змінної show, що дозволить вставляти значення змінних безпосередньо в текст.
# Переконайтеся, що у виведеному рядку коректно вказано довжину, ширину та площу кімнати.


length = 2.75
width = 1.75
area = length * width
show = f"With width {width} and length {length} of the room, its area is equal to {area}"
print("ЗАДАЧА #6 :", show)



# ❗ ЗАДАЧА #7

# ТИПИ ДАНИХ. BOOLEAN


# Булевий тип часто використовують, щоб позначити стан об'єкта. Наприклад, змінна is_active може вказувати, чи активний обліковий запис користувача, чи ні. Також акаунти користувачів часто не видаляють із бази даних, а просто встановлюють їм властивість is_delete – це називають soft delete (м'яке видалення). Використовуючи булевий тип даних у Python, встановити стан облікових записів користувачів за допомогою змінних is_active та is_delete.

# Задачі:

# Встановіть змінній is_active значення True, щоб вказати, що обліковий запис користувача активний.
# Встановіть змінній is_delete значення False, щоб вказати, що обліковий запис користувача не видалено.
# Очікуваний результат: Після виконання програми, ви повинні мати дві булеві змінні: is_active з істинним значенням та is_delete з хибним значенням.


is_active = True
is_delete = False
print("ЗАДАЧА #7 :", is_active, ",", is_delete)



# ❗ ЗАДАЧА #8

# ТИПИ ДАНИХ. РЕЗЮМЕ


# Створіть чотири змінні різних типів даних у Python із відповідними значеннями.

# Задачі:

# Оголосіть змінну name, як рядок і присвойте їй текстове значення.
# Оголосіть числову змінну age і присвойте їй ціле числове значення.
# Оголосіть булеву змінну is_active і присвойте їй одне з булевих значень True або False.
# Оголосіть змінну subscription і встановіть її значення як None, щоб вказати на відсутність значення.

# Очікуваний результат:

# Після виконання програми, ви повинні мати чотири змінні name, age, is_active, subscription, кожна з яких представляє різний тип даних.


name = 'Andrii'
age = 36
is_active = True
subscription = None
print("ЗАДАЧА #8 :", name, ",", age, ",", is_active, ",", subscription)



# ❗ ЗАДАЧА #9

# ПРИВЕДЕННЯ ТИПІВ


# Повернімося до завдання з розрахунку площі. Створіть програму на Python, яка розраховує площу кімнати, перетворюючи рядкові значення довжини та ширини на числа, та формує інформативне повідомлення про результат.

# Задачі:

# Оголосіть змінні length та width з рядковими значеннями довжини та ширини кімнати. Задайте їм значення "2.75" та "1.75".
# Перетворіть рядкові значення length та width на дійсні числа (тип float) при розрахунку площі.
# Розрахуйте площу кімнати area як добуток перетворених значень довжини та ширини.
# Створіть змінну show, яка міститиме інформативний рядок із шаблоном: 'With width <значення ширини> and length < значення довжини> of the room, its area is equal to <значення площі>'.

# Очікуваний результат:

# Програма повинна зберегти в змінну show інформативний рядок про розміри кімнати та її площу, використовуючи перетворення з рядкових у числові значення довжини та ширини.

# Підказки:

# Використовуйте функцію float() для перетворення рядкових значень у дійсні числа.
# У змінній show переконайтеся, що відображені коректні розміри та площа кімнати.


length = "2.75"
width = "1.75"
area = float(length) * float(width)
show = f"With width {width} and length {length} of the room, its area is equal to {area}"
print("ЗАДАЧА #9 :", show)



# ❗ ЗАДАЧА #10

# ПРИВЕДЕННЯ ТИПІВ


# Створити програму на Python, яка запитує у користувача особисті дані та зберігає їх у відповідні змінні.

# Задачі:

# Використовуйте функцію input для отримання від користувача наступних даних:
# Ім'я name, як рядок.
# Електронну пошту email, як рядок.
# Вік age, як ціле число, тип int.
# Зріст height, як дійсне число, тип float.
# Бажання отримувати повідомлення від сайту is_active, як булеве значення.
# Для кожної змінної створіть окреме запитання відповідно до її типу даних.
# Переконайтеся, що введені дані перетворюються в правильний тип даних перед збереженням у змінних.

# Очікуваний результат:

# Програма повинна запитувати у користувача ім'я, електронну пошту, вік, зріст та бажання отримувати повідомлення, і зберігати ці дані у відповідних змінних.

# Підказки:

# Використовуйте int() та float() для перетворення рядкових значень у відповідні числові типи.
# Для перетворення рядкового введення в булеве значення, ми вважаємо, що якщо користувач не згоден, то він нічого не вів у функцію input.


name = input("Your name? ")
email = input("Your email? ")
age = int(input("Your age? "))
height =float(input("Your height? "))
is_active = bool("Do you want to receive notifications? ")
print("ЗАДАЧА #10 :", name, ",", email, ",", age, ",", height, ",", is_active)



# ❗ ЗАДАЧА #11

# ЗАВДАННЯ: РОЗРАХУНОК ПЛОЩІ


# Необхідно створити програму на Python, яка розраховує площу кімнати, отримуючи значення довжини та ширини від користувача через функцію input та перетворюючи їх з рядкового типу у числовий (float).

# Задачі:

# Використовуйте функцію input для отримання значень довжини length та ширини width кімнати від користувача.
# Переконайтеся, що введені дані перетворюються з рядкового типу в числовий тип float негайно після отримання їх через input.
# Розрахуйте площу кімнати area, перемноживши перетворені значення length та width.

# Очікуваний результат:

# Програма повинна запитати у користувача довжину та ширину кімнати, перетворити ці значення з рядкових у дійсні числа, а потім розрахувати площу кімнати.

# Підказки:

# Пам'ятайте, що input завжди повертає рядкове значення, тому його потрібно перетворити у числовий тип, якщо ви плануєте використовувати ці дані для математичних обчислень.
# Використовуйте float() для перетворення рядкового введення в дійсне число.


length = float(input("length? "))
width = float(input("width? "))
area = length * width
print("ЗАДАЧА #11 :", area)



# ❗ ЗАДАЧА #12

# СПИСКИ


# Створіть програму на Python, яка ініціалізує порожній список і заповнює його певними значеннями за вказаними індексами.

# Задачі:

# Створіть порожній список my_list.
# Додайте до списку my_list наступні елементи, використовуючи індекси для їх розміщення:
# На позицію з індексом 0 помістіть ціле число 2024.
# На позицію з індексом 1 помістіть рядок 'Python'.
# На позицію з індексом 2 помістіть дійсне число 3.12.

# Очікуваний результат:

# Після виконання програми, список my_list повинен містити три елементи у зазначеному порядку: ціле число, рядок, та дійсне число.

# Підказки:

# Можете використовувати метод insert() для додавання елементів у список на відповідні позиції.
# Переконайтеся, що елементи додані у правильному порядку за заданими індексами.


my_list = []
my_list.insert(0, 2024)
my_list.insert(1, 'Python')
my_list.insert(2, 3.12)
print("ЗАДАЧА #12 :", my_list)



# ❗ ЗАДАЧА #13

# МЕТОДИ СПИСКІВ


# Створіть програму на Python, яка виконує серію операцій з двома списками, змінюючи їхній вміст і порядок елементів.

# Задачі:

# Маючи два списки my_list і some_data, використайте метод extend, щоб додати всі елементи зі списку some_data до кінця списку my_list.
# Використайте метод insert, щоб додати рядок 'Python' на позицію з індексом 1 у списку my_list.
# Використайте метод reverse, щоб розвернути порядок елементів у списку my_list.

# Очікуваний результат:

# Після виконання програми, список my_list повинен відображати вказані зміни.


my_list = [2024, 3.12]
some_data = ['Python']
my_list.extend(some_data)
my_list.insert(1, 'Python')
my_list.reverse()
print("ЗАДАЧА #13 :", my_list)



# ❗ ЗАДАЧА #14

# СЛОВНИК


# Створіть програму на Python, яка ініціалізує порожній словник і заповнює його певними ключами та відповідними значеннями.

# Задачі:

# Створіть порожній словник data.
# Додайте до словника data наступні пари ключ-значення:
# Ключ year зі значенням цілого числа 2024.
# Ключ lang зі значенням рядка 'Python'.
# Ключ version зі значенням дійсного числа 3.12.

# Очікуваний результат:

# Після виконання програми, словник data повинен містити три пари ключ-значення, як вказано вище.


data = {}
data['year'] = 2024
data['lang'] = 'Python'
data['version'] = 3.12
print("ЗАДАЧА #14 :", data)



# ❗ ЗАДАЧА #15

# МЕТОДИ СЛОВНИКІВ


# Створіть програму на Python, яка модифікує порожній словник cat, додаючи до нього різні ключі та значення, а також використовує значення з іншого словника info.

# Задачі:

# Використовуйте словник cat для зберігання інформації про кота. Додайте до нього наступні ключі та відповідні значення:
# Ключ "nick" з рядковим значенням імені кота (наприклад, "Simon").
# Ключ "age" з цілим числовим значенням віку кота (наприклад, 7).
# Ключ "characteristics" зі списком характеристик кота (наприклад, ["лагідний", "кусається"]).
# Оголосіть змінну age та використовуйте метод get для отримання віку кота зі словника cat.
# Використайте метод update, щоб додати до словника cat всі пари ключ-значення зі словника info.
# Очікуваний результат:

# Після виконання програми, словник cat повинен містити всю вказану інформацію про кота, включаючи ім'я, вік, характеристики та додаткові дані зі словника info.


cat = {}
info = {"status": "vaccinated", "breed": True}
cat['nick'] = "Simon"
cat['age'] = 7
cat['characteristics'] = ["лагідний", "кусається"]
age = cat.get('age')
cat.update(info)
print("ЗАДАЧА #15 :", cat)